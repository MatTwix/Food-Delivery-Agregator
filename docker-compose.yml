services:
  postgres-db: 
    image: postgres:14-alpine
    container_name: postgres-db
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=restaurants
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  restaurants-service:
    build:
      context: .
      dockerfile: ./restaurants-service/Dockerfile
    container_name: restaurants-service
    restart: on-failure
    depends_on:
      - postgres-db
    ports:
      - "3001:3001"
      - "4040:4040"
    environment:
      - DB_SOURCE=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-db:5432/${DB_NAME}?sslmode=disable
      - KAFKA_BROKERS=${KAFKA_BROKERS}

  orders-db:
    image: postgres:14-alpine
    container_name: orders-db
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=orders
    ports:
      - "5433:5432"
    volumes:
      - orders-postgres-data:/var/lib/postgresql/data
  
  orders-service:
    build:
      context: .
      dockerfile: ./orders-service/Dockerfile
    container_name: orders-service
    restart: on-failure
    depends_on:
      - orders-db
      - kafka
    ports:
      - "3002:3002"
    environment:
      - DB_SOURCE=postgresql://${DB_USER}:${DB_PASSWORD}@orders-db:5432/orders?sslmode=disable
      - KAFKA_BROKERS=${KAFKA_BROKERS}

  payments-service:
    build:
      context: .
      dockerfile: ./payments-service/Dockerfile
    container_name: payments-service
    restart: on-failure
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKERS=${KAFKA_BROKERS}

  notification-service:
    build: 
      context: .
      dockerfile: ./notification-service/Dockerfile
    container_name: notification-service
    restart: on-failure
    depends_on: 
      - kafka
    environment:
      - KAFKA_BROKERS=${KAFKA_BROKERS}

  couriers-db: 
    image: postgres:14-alpine
    container_name: couriers-db
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=couriers
    ports:
      - "5434:5432"
    volumes:
      - couriers-postgres-data:/var/lib/postgresql/data

  couriers-service:
    build:
      context: .
      dockerfile: ./couriers-service/Dockerfile
    container_name: couriers-service
    restart: on-failure
    depends_on:
      - couriers-db
      - kafka
    ports:
      - "3003:3003"
    environment:
      - DB_SOURCE=postgresql://${DB_USER}:${DB_PASSWORD}@couriers-db:5432/couriers?sslmode=disable
      - KAFKA_BROKERS=${KAFKA_BROKERS}

  users-db:
    image: postgres:14-alpine
    container_name: users-db
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=users
    ports:
      - "5435:5432"
    volumes:
      - users-postgres-data:/var/lib/postgresql/data

  users-service:
    build:
      context: .
      dockerfile: ./users-service/Dockerfile
    container_name: users-service
    restart: on-failure
    depends_on:
      - users-db
      - kafka
    ports:
      - "3004:3004"
    environment:
      - DB_SOURCE=postgresql://${DB_USER}:${DB_PASSWORD}@users-db:5432/users?sslmode=disable
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}

  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: api-gateway
    restart: on-failure
    ports: 
      - "3000:3000"
    depends_on:
      - restaurants-service
    environment:
      - JWT_SECRET=${JWT_SECRET}
    
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      - kafka
    ports:
      - "19000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092

volumes:
  postgres-data:
  orders-postgres-data:
  couriers-postgres-data:
  users-postgres-data: